I"H	<p>A storm is raging outside in London, and the world is on the brink of 
a Coronavirus pandemic, but have you always wanted to know just what a Y
Combinator was didn’t you? The phrase has been popularised by the startup
school of the same name, and there’s actually some very interesting mathematics
behind it.</p>

<h2 id="1-what-is-it-for">1) What is it for?</h2>

<p>It helps to define recursive functions in the lambda calculus.
Let’s break that down. Recursion is the cornerstone of control flow in the
functional style of programming. However, it’s not possible to define recursive
functions in the lambda calculus. The lambda calculus is just a set of simple
rules that underpin functional programming, that allows one to express 
arbitrary computations in terms of the application of functions to inputs and
get outputs, it’s so simple that it doesn’t make space for recursive
functions.</p>

<h2 id="2-lightspeed-lambda-calculus">2) Lightspeed Lambda Calculus.</h2>

<p>The lambda abstraction allows you to express an anonymous function in the lambda
calculus, and will be very familiar with Python programmers who’ve used Python’s
anonymous functions.</p>

<p>Consider the increment function written using Python lambdas,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>
<p>And an equivalent definition using the lambda calculus (with a dyadic addition
operator).</p>

<script type="math/tex; mode=display">\lambda x . x + 1</script>

<p>You can see the obvious resemblence. The variable <code class="highlighter-rouge">x' is bound to the function
in the sense that it's not making reference to an </code>x’ defined elsewhere in your
lambda expression, (or your code if you were programming).</p>

<h2 id="2-lightspeed-lambda-calculus-1">2) Lightspeed Lambda Calculus.</h2>
<p>In Lambda calculus there are 3 simple rules for simplying expressions. Why do
you need this? Well, expressions can be arbitrary complex and still be equivalent
in some senses.</p>

<p>Consider the following two following equivalent lambda abstractions.</p>

<h2 id="2-lightspeed-lambda-calculus-2">2) Lightspeed Lambda Calculus.</h2>
:ET